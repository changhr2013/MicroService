## 服务器配置
server:
  ## undertow 配置
  undertow:
    max-http-post-size: 0
    # 设置I/O线程数，它主要执行非阻塞的任务，它们会负责多个连接，默认设置每个CPU核心一个线程，数量和CPU内核数目一样即可
    io-threads: 4
    # 阻塞任务线程池，当执行类似Servlet请求阻塞操作，undertow会从这个线程池中取得线程，它的值设置取决于系统的负载 io-threads * 8
    worker-threads: 32
    # 以下的配置会影响buffer，这些buffer会用于服务器连接的I/O操作，有点类似netty的池化内存管理
    # 每块buffer的空间大小，越小的空间被利用越充分
    buffer-size: 1024
    # 每个区分配的buffer数量，所以pool的大小是buffer-size * buffers-per-region
    # buffers-per-region: 1024 这个参数不需要写了
    # 是否分配的直接内存
    direct-buffers: true

## spring 配置
spring:
  application:
    # 指定注册到 Eureka Server 上的应用名称
    name: microservice-provider-user
  jpa:
    generate-ddl: false
    show-sql: true
    hibernate:
      ddl-auto: none
  datasource:                           # 指定数据源
    platform: h2                        # 指定数据源类型
    schema: classpath:schema.sql        # 指定h2数据库的建表脚本
    data: classpath:data.sql            # 指定h2数据库的数据脚本
  sleuth:
    sampler:
      percentage: 1.0
  # rabbitmq配置
  rabbitmq:
    host: 192.168.40.192
    port: 5672
    username: rabbitmq
    password: rabbitmq
  zipkin:
    rabbitmq:
      queue: zipkin

## 注册中心-客户端配置
eureka:
  client:
    # 设为true，开启健康检查（需要spring-boot-starter-actuator依赖）
    healthcheck:
      enabled: true
    serviceUrl:
      defaultZone: http://peer1:8761/eureka/,http://peer2:8762/eureka/
    # 定时刷新本地缓存时间，5秒
    registry-fetch-interval-seconds: 5
  instance:
    # 表示将自己的 IP 注册到 Eureka Server
    prefer-ip-address: true
    # 心跳间隔，5秒
    lease-renewal-interval-in-seconds: 5
    # 没有心跳的淘汰时间，15秒
    lease-expiration-duration-in-seconds: 15

## 日志配置
logging:
  path: /home/microservice/log/
  file: microservice-provider-user.log
---
spring:
  profiles: balance1
server:
  port: 8000
---
spring:
  profiles: balance2
server:
  port: 8001