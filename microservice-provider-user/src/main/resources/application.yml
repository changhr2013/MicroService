spring:
  application:
    # 指定注册到 Eureka Server 上的应用名称
    name: microservice-provider-user
  jpa:
    generate-ddl: false
    show-sql: true
    hibernate:
      ddl-auto: none
  # 指定数据源
  datasource:
    # 指定数据源类型
    platform: h2
    # 指定 h2 数据库的建表脚本
    schema: classpath:schema.sql
    # 指定 h2 数据库的数据脚本
    data: classpath:data.sql

# 健康检查
management:
  endpoint:
    health:
      show-details: always

eureka:
  client:
    healthcheck:
      enabled: true
    service-url:
#      default-zone: http://user:password123@peer1:8761/eureka/,http://user:password123@peer2:8762/eureka/
        default-zone: http://peer1:8761/eureka/,http://peer2:8762/eureka/
  instance:
    # 表示将自己的 IP 注册到 Eureka Server
    prefer-ip-address: true

logging:
  level:
    root: INFO
    org.hibernate: INFO
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.hibernate.type.descriptor.sql.BasicExtractor: TRACE

## INFO
info:
  app:
    name: @project.artifactId@
    encoding: @project.build.sourceEncoding@
    java:
      source: @java.version@
      target: @java.version@

server:
  undertow:
    max-http-post-size: 0
    # 设置I/O线程数，它主要执行非阻塞的任务，它们会负责多个连接，默认设置每个CPU核心一个线程，数量和CPU内核数目一样即可
    io-threads: 4
    # 阻塞任务线程池，当执行类似Servlet请求阻塞操作，undertow会从这个线程池中取得线程，它的值设置取决于系统的负载 io-threads * 8
    worker-threads: 32
    # 以下的配置会影响buffer，这些buffer会用于服务器连接的I/O操作，有点类似netty的池化内存管理
    # 每块buffer的空间大小，越小的空间被利用越充分
    buffer-size: 1024
    # 每个区分配的buffer数量，所以pool的大小是buffer-size * buffers-per-region
    # buffers-per-region: 1024 这个参数不需要写了
    # 是否分配的直接内存
    direct-buffers: true
---
spring:
     profiles: balance1
server:
  port: 8000

---
spring:
     profiles: balance2
server:
  port: 8001